//-------------------------------------------------------------------------------------------------
// Bank.java
//
public interface Bank {
    public void addCustomer(int threadNum, int[] maxDemand, int[] allocated);    // add customer to Bank

    public void getState();     // outputs available, allocation, max, and need matrices

           // request resources; specify number of customer being added, maxDemand for customer
           //      returns if request is grant
    public boolean requestResources(int threadNum, int[] request);

           // release resources
    public  void releaseResources(int threadNum, int[] release);
}



//-------------------------------------------------------------------------------------------------
// Customer.java
//
public class Customer implements Runnable {
    public static final int COUNT = 5;    // number of threads

    private int numOfResources;     // N different resources
    private int[] maxDemand;        // maximum this thread will demand
    private int customerNum;        // customer number
    private int[] request;          // request it is making

    private java.util.Random rand;  // random number generator

    private Bank theBank;           // synchronizing object

    public Customer(int customerNum, int[] maxDemand, Bank theBank) {
        this.customerNum = customerNum;
        this.maxDemand = new int[maxDemand.length];
        this.theBank = theBank;

        System.arraycopy(maxDemand,0,this.maxDemand,0,maxDemand.length);
        numOfResources = maxDemand.length;
        request = new int[numOfResources];
        rand = new java.util.Random();
    }

    public void run() {
        boolean canRun = true;
        while (canRun) {
            try {
                SleepUtilities.nap();       // take a nap
                                            // ... then, make a resource request
                for (int i = 0; i < numOfResources; i++) { request[i] = rand.nextInt(maxDemand[i]+1); }
                
                if (theBank.requestResources(customerNum, request)) {   // if customer can proceed
                    SleepUtilities.nap();   // use and release the resources
                    theBank.releaseResources(customerNum, request);
                }
            } catch (InterruptedException ie) { canRun = false; }
        }
        System.out.println("Thread # " + customerNum + " I'm interrupted.");
    }
}


//-------------------------------------------------------------------------------------------------
// BankImpl.java
//
// implementation of the Bank
//
import java.io.*;
import java.util.*;

public class BankImpl implements Bank {
    private int n;			// the number of threads in the system
    private int m;			// the number of resources

    private int[] available; 	// the amount available of each resource
    private int[][] maximum; 	// the maximum demand of each thread
    private int[][] allocation;	// the amount currently allocated to each thread
    private int[][] need;		// the remaining needs of each thread

    private void showAllMatrices(int[][] alloc, int[][] max, int[][] need, String msg) { 
		// todo
	}
 
    private void showMatrix(int[][] matrix, String title, String rowTitle) {
		// todo
    }

    private void showVector(int[] vect, String msg) {
		// todo
    }

    public BankImpl(int[] resources) {      // create a new bank (with resources)
		// todo
    }
                               // invoked by a thread when it enters the system;  also records max demand
    public void addCustomer(int threadNum, int[] allocated, int[] maxDemand) {
		// todo
   }

    public void getState() {        // output state for each thread
		// todo
    }

    private boolean isSafeState (int threadNum, int[] request) {
		// todo -- actual banker's algorithm
    }
                                // make request for resources. will block until request is satisfied safely
    public synchronized boolean requestResources(int threadNum, int[] request)  {
 		// todo
     }

    public synchronized void releaseResources(int threadNum, int[] release)  {
		// todo
}



//-------------------------------------------------------------------------------------------------
// Factory.java
//
// Factory class that creates the bank and each bank customer
// Usage:  java Factory 10 5 7

import java.io.*;
import java.util.*;

public class Factory {
    public static void main(String[] args) {
        String filename = "/Users/williammccarthy/IdeaProjects/BankersAlgorithmProject_ch7/src/infile.txt";
        int nResources = args.length;
        int[] resources = new int[nResources];
        for (int i = 0; i < nResources; i++) { resources[i] = Integer.parseInt(args[i].trim()); }

        Bank theBank = new BankImpl(resources);
        int[] maxDemand = new int[nResources];
        int[] allocated = new int[nResources];
        Thread[] workers = new Thread[Customer.COUNT];      // the customers

		// read in values and initialize the matrices
		// to do
		// ...
                workers[threadNum] = new Thread(new Customer(threadNum, maxDemand, theBank));
                theBank.addCustomer(threadNum, allocated, maxDemand);

                ++threadNum;        //theBank.getCustomer(threadNum);
                resourceNum = 0;
            }
        } catch (FileNotFoundException fnfe) { throw new Error("Unable to find file \"" + filename + "\"");
        } catch (IOException ioe) { throw new Error("Error processing \"" + filename + "\""); }

        System.out.println("FACTORY: created threads");     // start the customers

        for (int i = 0; i < Customer.COUNT; i++) { workers[i].start(); }
        System.out.println("FACTORY: started threads");

    }
}


//-------------------------------------------------------------------------------------------------
// SleepUtilities.java
//
// utility for causing a thread to sleep
// we should be handling interrupted exceptions, but are not doing so for clarity

public class SleepUtilities {
    public static void nap() throws InterruptedException {
        nap(NAP_TIME);          // sleep between zero and NAP_TIME s
    }

    public static void nap(int duration) throws InterruptedException {
        int sleeptime = (int) (NAP_TIME * Math.random() );
        try { Thread.sleep(sleeptime * 1000); }
        catch (InterruptedException e) { throw e; }
    }
    private static final int NAP_TIME = 5;
}


//-------------------------------------------------------------------------------------------------
// input file with initial allocations and max demands per process
//
// infile.txt
//
Alloc   Max
0,1,0,  7,5,3
2,0,0,  3,2,2
3,0,2,  9,0,2
2,1,1,  2,2,2
0,0,2,  4,3,3




